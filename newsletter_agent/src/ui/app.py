# -*- coding: utf-8 -*-
"""
Newsletter Agent - User Interface
Gradio-based web interface
"""

import gradio as gr
from typing import List, Tuple, Dict, Any
from datetime import datetime

try:
    from loguru import logger
except ImportError:
    import logging
    logger = logging.getLogger(__name__)

try:
    from newsletter_agent.src.agents import get_global_agent, get_agent_status
    from newsletter_agent.src.templates.newsletter_templates import NewsletterTemplateEngine
    from newsletter_agent.src.user.preferences import UserPreferencesManager
    from newsletter_agent.src.user.subscription import SubscriptionManager
    from newsletter_agent.src.user.storage import UserDataStorage
    from newsletter_agent.config.settings import settings
except ImportError as e:
    logger.error(f"Module import failed: {e}")
    # Create mock objects
    get_global_agent = None
    get_agent_status = None


def create_app():
    """Create Gradio application"""
    logger.info("Creating Gradio application interface...")
    
    # Initialize components
    newsletter_engine = NewsletterTemplateEngine()
    preferences_manager = UserPreferencesManager()
    subscription_manager = SubscriptionManager()
    storage = UserDataStorage()
    
    def generate_complete_newsletter(
        topic: str,
        style: str,
        length: str,
        audience: str,
        categories: List[str]
    ) -> Tuple[str, str, str]:
        """Generate complete newsletter"""
        try:
            logger.info(f"Starting newsletter generation: {topic}")
            
            # Get agent
            if get_global_agent:
                agent = get_global_agent()
                
                # Perform topic research
                research_prompt = f"Research topic '{topic}', collect relevant information and latest updates"
                research_result = agent.chat(research_prompt)
                logger.info("Topic research completed")
                
                # Generate newsletter
                newsletter_prompt = f"""
Based on the following research, generate a {length}-length newsletter in {style} style:

Topic: {topic}
Target audience: {audience}
Categories: {', '.join(categories) if categories else 'General'}

Research content:
{research_result.get('message', 'No research content available')}

Please generate a structured newsletter containing:
1. Title
2. Summary
3. Main content
4. Key insights
5. Conclusion
"""
                
                newsletter_result = agent.chat(newsletter_prompt)
                logger.info("Newsletter generation completed")
                
                if newsletter_result.get('success'):
                    newsletter_content = newsletter_result['message']
                    
                    # Format as HTML
                    html_newsletter_content = newsletter_content.replace('\n', '<br>')
                    html_content = f"""
                    <div class="newsletter">
                        <h1>📰 Smart Newsletter</h1>
                        <div class="metadata">
                            <p><strong>Topic:</strong> {topic}</p>
                            <p><strong>Style:</strong> {style}</p>
                            <p><strong>Generated at:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                        </div>
                        <div class="content">
                            {html_newsletter_content}
                        </div>
                    </div>
                    """
                    
                    # Generate Markdown format
                    markdown_content = f"""# 📰 Smart Newsletter

**Topic:** {topic}  
**Style:** {style}  
**Generated at:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

---

{newsletter_content}

---
*Automatically generated by Newsletter Agent*
"""
                    
                    success_msg = f"✅ Newsletter generated successfully! Topic: {topic}"
                    
                    return success_msg, html_content, markdown_content
                else:
                    error_msg = f"❌ Newsletter generation failed: {newsletter_result.get('error', 'Unknown error')}"
                    return error_msg, "", ""
            
            else:
                # Fallback mode - generate example newsletter
                current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                example_content = f"""
# {topic} - Smart Newsletter

## 📋 Summary
This newsletter focuses on the latest developments and important trends in {topic}.

## 🔍 Key Findings

### Technology Advances
- Breakthrough innovations in {topic} technology
- New application scenarios emerging
- Industry standards maturing

### Market Trends
- Rapid growth in related markets
- Increasing investment activity
- Competitive landscape intensifying

### Policy Environment
- Regulatory policies becoming clearer
- Support measures being introduced
- International cooperation strengthening

## 💡 Key Insights
{topic} is profoundly changing development models in related industries. Companies need to closely monitor technology trends to gain competitive advantage.

## 🔮 Future Outlook
{topic} is expected to maintain rapid development momentum, with technology applications becoming more mature.

---
*Generated by Newsletter Agent | {current_time}*
"""
                
                html_example_content = example_content.replace('\n', '<br>')
                html_content = f"""
                <div class="newsletter">
                    <h1>📰 Smart Newsletter</h1>
                    <div class="metadata">
                        <p><strong>Topic:</strong> {topic}</p>
                        <p><strong>Style:</strong> {style}</p>
                        <p><strong>Generated at:</strong> {current_time}</p>
                    </div>
                    <div class="content">
                        {html_example_content}
                    </div>
                </div>
                """
                
                success_msg = f"✅ Newsletter generated successfully! Topic: {topic} (Example mode)"
                return success_msg, html_content, example_content
                
        except Exception as e:
            logger.error(f"Newsletter generation failed: {e}")
            error_msg = f"❌ Newsletter generation failed: {str(e)}"
            return error_msg, "", ""
    
    def get_system_status() -> str:
        """Get system status"""
        try:
            status_info = []
            
            # Agent status
            if get_agent_status:
                agent_status = get_agent_status()
                if agent_status.get('is_ready'):
                    status_info.append("✅ AI Agent: Ready")
                    status_info.append(f"   - Available tools: {agent_status.get('tools_count', 0)}")
                    status_info.append(f"   - Language model: {'Available' if agent_status.get('llm_available') else 'Unavailable'}")
                else:
                    status_info.append("❌ AI Agent: Not ready")
            else:
                status_info.append("❌ AI Agent: Not initialized")
            
            # Data sources status
            try:
                from newsletter_agent.src.data_sources.aggregator import data_aggregator
                data_status = data_aggregator.get_data_sources_status()
                status_info.append("\n📡 Data sources status:")
                for source, info in data_status.items():
                    if info.get('available'):
                        status_info.append(f"   ✅ {source.upper()}: Available")
                    else:
                        status_info.append(f"   ❌ {source.upper()}: Unavailable")
            except Exception as e:
                status_info.append(f"❌ Data sources: Check failed ({e})")
            
            # System configuration
            status_info.append("\n⚙️ System configuration:")
            status_info.append(f"   - App version: {settings.APP_VERSION}")
            status_info.append(f"   - Debug mode: {'Enabled' if settings.DEBUG else 'Disabled'}")
            status_info.append(f"   - Content language: {settings.CONTENT_LANGUAGE}")
            
            return "\n".join(status_info)
            
        except Exception as e:
            return f"❌ Failed to get system status: {str(e)}"
    
    # Create interface
    with gr.Blocks(
        title="Newsletter Agent - Smart Newsletter Generator",
        theme=gr.themes.Soft(),
        css="""
        .newsletter {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .metadata {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            border-left: 4px solid #007bff;
        }
        .content {
            line-height: 1.6;
            color: #333;
        }
        """
    ) as app:
        
        gr.Markdown("# 📰 Newsletter Agent - Smart Newsletter Generator")
        gr.Markdown("Using AI technology to automatically generate personalized newsletters")
        
        with gr.Tabs():
            # Newsletter generation tab
            with gr.TabItem("🚀 Generate Newsletter"):
                with gr.Row():
                    with gr.Column(scale=1):
                        topic_input = gr.Textbox(
                            label="📝 Newsletter topic",
                            placeholder="E.g.: Latest developments in AI, New energy vehicle market trends...",
                            value="Latest developments in artificial intelligence"
                        )
                        
                        style_select = gr.Dropdown(
                            label="✍️ Writing style",
                            choices=["professional", "casual", "academic", "creative"],
                            value="professional"
                        )
                        
                        length_select = gr.Dropdown(
                            label="📄 Content length",
                            choices=["short", "medium", "long"],
                            value="medium"
                        )
                        
                        audience_select = gr.Dropdown(
                            label="👥 Target audience",
                            choices=["general", "tech", "business", "academic"],
                            value="general"
                        )
                        
                        categories_select = gr.CheckboxGroup(
                            label="🏷️ Categories",
                            choices=["Technology", "Business", "Health", "Entertainment", "Sports", "Politics", "Education"],
                            value=["Technology", "Business"]
                        )
                        
                        generate_btn = gr.Button("🎯 Generate Newsletter", variant="primary", size="lg")
                    
                    with gr.Column(scale=2):
                        status_output = gr.Textbox(
                            label="📊 Generation status",
                            value="Waiting to generate...",
                            interactive=False
                        )
                        
                        with gr.Tabs():
                            with gr.TabItem("🌐 HTML Preview"):
                                html_output = gr.HTML(label="HTML format")
                            
                            with gr.TabItem("📝 Markdown"):
                                markdown_output = gr.Textbox(
                                    label="Markdown format",
                                    lines=20,
                                    max_lines=30
                                )
                
                # Bind events
                generate_btn.click(
                    fn=generate_complete_newsletter,
                    inputs=[
                        topic_input,
                        style_select,
                        length_select,
                        audience_select,
                        categories_select
                    ],
                    outputs=[status_output, html_output, markdown_output]
                )
            
            # System Status tab
            with gr.TabItem("⚙️ System Status"):
                with gr.Row():
                    with gr.Column():
                        status_btn = gr.Button("🔍 Check System Status", variant="secondary")
                        system_status_output = gr.Textbox(
                            label="System Status Information",
                            lines=15,
                            value="Click button to check system status..."
                        )
                
                status_btn.click(
                    fn=get_system_status,
                    outputs=system_status_output
                )
            
            # Usage Guide tab
            with gr.TabItem("📖 Usage Guide"):
                gr.Markdown("""
                ## 🎯 Usage Steps
                
                1. **Select Topic** - Enter your topic of interest in the "Newsletter topic" field
                2. **Set Preferences** - Choose writing style, content length and target audience
                3. **Select Categories** - Check the content categories you're interested in
                4. **Generate Newsletter** - Click the "Generate Newsletter" button to create
                5. **View Results** - Check the generated newsletter in HTML Preview or Markdown tabs
                
                ## 🔧 Features
                
                - ✅ **Smart Generation** - Automatically generates personalized newsletters using AI
                - ✅ **Multiple Styles** - Supports professional, casual, academic and creative writing styles  
                - ✅ **Content Customization** - Adjustable content length and target audience
                - ✅ **Multiple Output Formats** - Supports both HTML and Markdown output
                - ✅ **Real-time Generation** - Fast response with immediate results
                
                ## 💡 Tips
                
                - **Topic Suggestions**: Use specific topic descriptions like "AI applications in healthcare"
                - **Style Selection**: Choose appropriate style based on your readers
                - **Category Filtering**: Selecting relevant categories helps generate more precise content
                
                ## 🚀 Getting Started
                
                Switch to the "Generate Newsletter" tab now to create your first smart newsletter!
                """)
        
        gr.Markdown("---")
        gr.Markdown("*Powered by Newsletter Agent | AI-Driven Newsletter Generation*")
    
    return app


def create_main_interface():
    """Create main interface - compatibility function"""
    return create_app()


if __name__ == "__main__":
    app = create_app()
    if app:
        app.launch(
            server_name="0.0.0.0",
            server_port=7860,
            share=False,
            debug=True
        )
